import streamlit as st

def app():
    st.title("ðŸŽ² How's it work? ðŸ•¹")
    st.markdown('''

Here are some technical details for the curious.

### The recommender

- The recommender uses a really simple memory-based item-item collaborative filtering model
- A huge table contains a similarity score for every (video game, board game) pair

                  
     Video Game    Counter-Strike  Team Fortress Classic  Day of Defeat
     Board Game                                                                 
     Die Macher         -0.021792              -0.012481       0.007628   
     Samurai             0.002914              -0.000590      -0.037223   
     Acquire            -0.032521              -0.009481      -0.028111   
     Cathedral           0.031774               0.000000      -0.003076   
     El Caballero        0.017950              -0.018933       0.000000 

- The tool accesses a user's video game playtimes, converts the game playtimes to z-scores, removes games they've played fewer than 10 minutes, and removes games that aren't in the similarity table
    - The z-score transformation means that games that the user plays a lot still migtht get negative scores. A negative score just means the user doesn't *love* the game
    - Playtimes were used instead of Steam ratings because **very few** Steam users rate games on Steam (while the average BGG user rates dozens of board games)
- The tool then generates a score for every board game
    - If a board game has at least k similar video games in the user's video game collectionâ€¦
    	- â€¦then the predicted board game score is the dot product of all video games' similarity scores for that board game and the player's scores for those video games
    	- k is 3 (by default)
    	- Two games are similar if their similarity score > 0.15 (by default)
    	- Dot product is used instead of a weighted average because similarity scores can be negative
    - If there aren't enough similar video games to predict a board game score
        - The tool just uses the global average z-score for that board game
        - When this happens, the tool reports so in the last column
        - You can turn this off with the checkbox "Only add popular games to ranking if they're similar to games I like"
        - If k or the similarity threshhold is too high, all of the recommended games are just games that are popular, with no personalized recommendation at all
    - In order to weave together the genuine predictions (unbounded dot products) and the popular games (global average z-scores), the genuine predictions are transformed into z-scores
        - +2 is a very good score (the user will love it!) and -2 is a very mediocre score (maybe they'll hate it)

### The similarity table

- The similarity table is generated by calculating the cosine similarity between games' user scores

                      user106  user1172   user207   user263 
      Game    39210  0.595160 -0.027969  5.380914  2.828327 
              63500 -0.241221 -0.469573 -2.419156  0.602278 



- User scores are z-scores. This accounts for the fact that users have different baseline ratings (some users use the upper end of the rating scale, while others use the lower end) or different playtime distributions
- Before being transformed into z-scores, video game playtimes are log-transformed. This addresses the heavy right tail in most playtime distributions. It's not uncommon to find that a player plays one or two games for hundreds or even thousands of hours
                ''')
